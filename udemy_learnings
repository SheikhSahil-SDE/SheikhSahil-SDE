**The ultimate DevOps Bootcamp course for all your DevOps learning**
                  




Section 5 - GIT Introduction
 * GIT - Distributed Version Control System (Content Tracker)
 * GIT - Local & Remote Repository
         * Local Repository
            |  |  ├── 1. Working Area
            |  ├────  2. Staging Area
            |──────── 3. Committed Files 

** GIT LAB - Command cat /etc/*release* and to identify the name of the environment
          - $ sudo apt install git-all (For Debian-based OS)
            (Refer to the GIT installation documentation here: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
          - $ sudo apt-get install git-man
          - $ git help init 
          - $ git init --bare (Create a bare repository. If the GIT_DIR environment is not set, it is set to the current working directory.)

* Initialize a GIT Repository - $git init (To initialize the Git in the Git repository in C:/Users/UzumakiN/.git/)
                              - $ touch (command to create file)
                              - $ echo "Your content to put in the file" >> name.txt
                              - $ git status (To check the status of the GIT)
                              - $ git add name.txt (To move it to the 2. stage i.e Staging Area)
                              - $ git config user.name "User_Name" (This command is used before committing the git to set the user name)    
                              - $ git config user.email "useremail@example.com" (This command is used before committing the git to set the user email)
                              - $ git commit (Without any Message) /* It will open a TEXT EDITOR, and in the TEXT EDITOR you can add Message*/
                              - $ git commit -m "Useful Message Here" (To move it to the 3. stage i.e Committed Files) /*-m stands for Message along with a small description within "_" */                            
                              - $ git restore <FILE NAME> (To discard changes in the working directory)
                              - $ git add . (This cmd will move multiple files in the Staging Area)

  Section 6 - GIT Branches
    * GIT Branches - A Branch is a pointer to the last commit
                    - $ git log (To check the logs of a particular git repo)
                    - $ git checkout -b 
  


 

                              

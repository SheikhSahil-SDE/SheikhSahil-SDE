i**The ultimate DevOps Bootcamp course for all your DevOps learning**
                  




Section 5 - GIT Introduction
 * GIT - Distributed Version Control System (Content Tracker)
 * GIT - Local & Remote Repository
         * Local Repository
            |  |  ├── 1. Working Area
            |  ├────  2. Staging Area
            |──────── 3. Committed Files 

** GIT LAB - Command cat /etc/*release* and to identify the name of the environment
          - $ sudo apt install git-all (For Debian-based OS)
            (Refer to the GIT installation documentation here: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
          - $ sudo apt-get install git-man
          - $ git help init 
          - $ git init --bare (Create a bare repository. If the GIT_DIR environment is not set, it is set to the current working directory.)

* Initialize a GIT Repository - $ git init (To initialize the Git in the Git repository in C:/Users/UzumakiN/.git/)
                              - $ touch (command to create file)
                              - $ echo "Your content to put in the file" >> name.txt
                              - $ git status (To check the status of the GIT)
                              - $ git add name.txt (To move it to the 2. stage i.e Staging Area)
                              - $ git config user.name "User_Name" (This command is used before committing the git to set the user name)    
                              - $ git config user.email "useremail@example.com" (This command is used before committing the git to set the user email)
                              - $ git commit (Without any Message) /* It will open a TEXT EDITOR, and in the TEXT EDITOR you can add Message*/
                              - $ git commit -m "Useful Message Here" (To move it to the 3. stage i.e Committed Files) /*-m stands for Message along with a small description within "_" */                            
                              - $ git restore <FILE NAME> (To discard changes in the working directory)
                              - $ git add . (This cmd will move multiple files in the Staging Area)

  Section 6 - GIT Branches
    * GIT Branches - A Branch is a pointer to the last commit
                    - $ git log (To check the logs of a particular git repo)
                    - $ git branch # List all branches
                    - $ git branch branch_name  # Create a new branch
                    - $ git checkout sarah  # Switch to an existing branch
                    - $ git checkout -b branch_name (To switch to a different branch i.e branch_name) #Create a new branch and Switch to it
                    - $ git branch -d max # Delete a branch


    * HEAD - It points to the Current position in the GIT Repo Start
                                                                            {46. Lab: Branches - checkout, push branch - Pending}
    * GIT Merge Branches
                        - $ ls #Shows all the files in the current Git   
                        - $ git log --oneline # To check the commits made
  

 Section 7 - GIT initializing Remote Repositories
  * Platforms to host our Remote Repositories - GitHub
                                              - GitLab
                                              - Bitbucket

  * Connecting Strings - https://..// [name].git (Example: https://github.com/kodekloudhub/stories.git)
          * In local Repository - $ git remote add origin "https://..// [name].git"
                                - $ git remote  -v                                     #Command to either fetch/push from the list of connecting strings in the local repo
                                    origin "https://..// [name].git" (fetch)
                                    origin "https://..// [name].git" (push)
                                    .
                                    .
                                    .
                                    origin "https://..// [name].git" (push)

  * Pushing to remote repositories  https://gitea.com/ (A lighter version of Github.)
                          Creating a new repository on the command line
                                    touch README.md
                                    git init
                                    git checkout -b "directory/name" /*To switch to a different branch*/
                                    git add README.md
                                    git commit -m "first commit"
                                    git remote add origin https://gitea.com/sarah/story-blog1.git
                                    git push -u origin main
                          Pushing an existing repository from the command line
                                    git remote add origin https://gitea.com/sarah/story-blog1.git
                                    git push -u origin main

                                - $ git remote <origin> <master> /**/

  * Cloning Remote Repositories - $ git clone [ ssh link ] 
                                  $ git config user.email "max@example.com" /* To tell GIT the email address*/ username
                                  $ git config user.name "username" /* To tell GIT the username*/ 

  * Pull Request - $ git push <BRANCH_NAME> <USER_NAME>

  * Fetching and Pulling - - $ git fetch origin master /*After merging remotely, the Local system doesn't know the changes. This command updates the Local Master Branch*/
                           - $ git merge origin/master /*After merging remotely, the Local system doesn't know the changes. This command merges the Local Master Branch*/
  
  * GIT - Merge Conflicts - 
  * Fork - 

  Section 8 - Jenkins Introduction
  Section 9 - Prerequisites
  Section 10 - Installing Jenkins















                              

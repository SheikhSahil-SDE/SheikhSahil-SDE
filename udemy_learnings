**The ultimate DevOps Bootcamp course for all your DevOps learning**
                  
$ cat /etc/*release* - To check the Ubuntu Version
$ sudo ufw disable - To disable the Firewalls
$ sudo ufw enable - To enable the Firewalls
$ sudo apt install network-manager-openvpn-gnome -y
$ sudo apt update && sudo apt full-upgrade -y 




Section 5 - GIT Introduction
 * GIT - Distributed Version Control System (Content Tracker)
 * GIT - Local & Remote Repository
         * Local Repository
            |  |  ├── 1. Working Area
            |  ├────  2. Staging Area
            |──────── 3. Committed Files 

** GIT LAB - Command cat /etc/*release* and to identify the name of the environment
          - $ sudo apt install git-all (For Debian-based OS)
            (Refer to the GIT installation documentation here: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
          - $ sudo apt-get install git-man
          - $ git help init 
          - $ git init --bare (Create a bare repository. If the GIT_DIR environment is not set, it is set to the current working directory.)

* Initialize a GIT Repository - $ git init (To initialize the Git in the Git repository in C:/Users/UzumakiN/.git/)
                              - $ touch (command to create file)
                              - $ echo "Your content to put in the file" >> name.txt
                              - $ git status (To check the status of the GIT)
                              - $ git add name.txt (To move it to the 2 stage i.e, Staging Area)
                              - $ git config user.name "User_Name" (This command is used before committing the git to set the user name)    
                              - $ git config user.email "useremail@example.com" (This command is used before committing the git to set the user email)
                              - $ git commit (Without any Message) /* It will open a TEXT EDITOR, and in the TEXT EDITOR you can add Message*/
                              - $ git commit -m "Useful Message Here" (To move it to the 3. stage i.e Committed Files) /*-m stands for Message along with a small description within "_" */                            
                              - $ git restore <FILE NAME> (To discard changes in the working directory)
                              - $ git add . (This cmd will move multiple files in the Staging Area)

  Section 6 - GIT Branches
              * GIT Branches - A Branch is a pointer to the last commit
                              - $ git log (To check the logs of a particular git repo)
                              - $ git branch # List all branches
                              - $ git branch branch_name  # Create a new branch
                              - $ git checkout sarah  # Switch to an existing branch
                              - $ git checkout -b branch_name (To switch to a different branch i.e branch_name) #Create a new branch and Switch to it
                              - $ git branch -d max # Delete a branch
          
          
              * HEAD - It points to the Current position in the GIT Repo Start
                                                                                      {46. Lab: Branches - checkout, push branch - Pending}
              * GIT Merge Branches
                                  - $ ls #Shows all the files in the current Git   
                                  - $ git log --oneline # To check the commits made
            

 Section 7 - GIT initializing Remote Repositories
              * Platforms to host our Remote Repositories - GitHub
                                                          - GitLab
                                                          - Bitbucket
            
              * Connecting Strings - https://..// [name].git (Example: https://github.com/kodekloudhub/stories.git)
                      * In local Repository - $ git remote add origin "https://..// [name].git"
                                            - $ git remote  -v                                     #Command to either fetch/push from the list of connecting strings in the local repo
                                                origin "https://..// [name].git" (fetch)
                                                origin "https://..// [name].git" (push)
                                                .
                                                .
                                                .
                                                origin "https://..// [name].git" (push)
            
              * Pushing to remote repositories  https://gitea.com/ (A lighter version of Github.)
                                      Creating a new repository on the command line
                                                touch README.md
                                                git init
                                                git checkout -b "directory/name" /*To switch to a different branch*/
                                                git add README.md
                                                git commit -m "first commit"
                                                git remote add origin https://gitea.com/sarah/story-blog1.git
                                                git push -u origin main
                                      Pushing an existing repository from the command line
                                                git remote add origin https://gitea.com/sarah/story-blog1.git
                                                git push -u origin main
            
                                            - $ git remote <origin> <master> /**/
            
              * Cloning Remote Repositories - $ git clone [ ssh link ] 
                                              $ git config user.email "max@example.com" /* To tell GIT the email address*/ username
                                              $ git config user.name "username" /* To tell GIT the username*/ 
            
              * Pull Request - $ git push <BRANCH_NAME> <USER_NAME>
            
              * Fetching and Pulling - - $ git fetch origin master /*After merging remotely, the Local system doesn't know the changes. This command updates the Local Master Branch*/
                                       - $ git merge origin/master /*After merging remotely, the Local system doesn't know the changes. This command merges the Local Master Branch*/
              * GIT - Merge Conflicts
              * Fork 

  Section 8 - Jenkins Introduction
            - $ go run main.go &     
  
  Section 9 - Prerequisites
      * What is CI/CD - CI: Continous Integration
                      - The Key pieces of CI
                            * Tests                        
                                  Unit Tests                          
                                  Integration Test                            
                            * Security Checks
          * CD vs CD - Continous Delivery VS Continous Deployment
                      - In Continous Delivery, after the CI process manual intervention is required to deploy the application.
                      - On the contrary, in Continous Deployment the deployment of the application is automated.
          * Key piece of CD (Continous Deployment)
                    - Authenticate (via AWS or Azure)
                    - Tests
    * What is Jenkins & Why? - Jenkins is Open-Source. And having 1000s of plugins for all the purposes. (Jenkins Official Website: https://www.jenkins.io/)
    
  Section 10 - Installing Jenkins

                          Jenkin: An Automation server
                          CI/CD refers to the continuous integration and continuous delivery/deployment process.
                          We can use Jenkins to automate routine system administration tasks.
                          Java packages is a prerequisite for installing Jenkins.
                          We can run Jenkins in a container

                        * Installing Jenkins on a VM
 
                        * Searching through Plugins

                        * Jenkins CLI

                              $ sudo yum install epel-release -y
                              $ sudo yum install fontconfig java-17-openjdk -y
                              $ sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo --no-check-certificate
                              $ sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
                              $ sudo yum install jenkins -y

                              $ sudo systemctl start jenkins // CMD to start Jenkins service

                        * Using Jenkins CLI

                            & su - user_name // To switch user

  Section 11 - Jenkins Plugins and Integrations

                        * What are plugins?
                        * Installing a Plugin
                        * Restarting Jenkins For Plugins That Require Restarts

                                $ sudo systemcli restart jenkins               // cmd to restart jenkins services
                                $ systemcli status jenkins                     // cmd to get jenkins status  


Section 12 - Systems Administration with Jenkins

                        * Administering Jenkins
                            - Backup
                            - Restore
                            - Monitor
                            - Scale
                            - Manage

                        * Backup and Restoring Jenkins 
                            * Which Files to Backup?
                            
                              $JENKINS_HOME                                    ** This file must be backed up **
                               |  |
                               |  |__  Configuration files (config.xml)        // Contains all the configuration Files of Jenkins 
                               |
                               |_____  jobs                             // Contains all the CI/CD Pipelines

                        * Backup Jenkins 
                              Creating a Backup
                                  Filesystem snapshots
                                  Plugins for backup
                                  Write a shell script that backs up the Jenkins controller               // Example: https://github.com/sue445/jenkins-backup-script/blob/master/jenkins-backup.sh    

                        * Restore Jenkins

                          $ sudo mkdir /var/lib/jenkins/jenkins_backup
                          $ sudo chown -R jenkins /var/lib/jenkins/jenkins_backup

                                 Go to Settings and enter /var/lib/jenkins/jenkins_backup as the Backup directory, tick Backup plugins archives check box and save the changes.
                                 NOTE: In the newer version of ThinBackup plugin, the settings can be found under Manage Jenkins > System.

                          Make sure to restart the Jenkins service after restoring the backup.
                          $ service jenkins restart


 Section 13 - Pipelines

              * What is Jenkinsfile?
                Jenkinsfile is a text file, and it contains Instructions for the pipeline
                Structure of Jenkinsfile
                |  |  |  |-----> Pipeline (The task we want to achieve/accomplish)
                |  |  |--------> Build Agent
                |  |-----------> Stages    
                |--------------> Steps

                Multi-Stage Pipeline - A Jenkinsfile that contains multiple stages is known as Multi-Stage Pipeline

              * Build a Jenkins file
                File name - Jenkinsfile
                            |  |-----> Onestage
                            |--------> MultiStage

              * Ran a Sample Pipeline
                
                    pipeline {
                        agent any
                    
                        stages {
                            stage('Build') {
                                steps {
                                    git '' //Get some code from a GitHub repository
                                }
                            }
                        }
                    }
        
              * Build a Multistage Pipeline
                Example:
                                    pipeline {
                                        agent any
                                    
                                        stages {
                                            stage('Dev') {
                                                steps {
                                                    git '' //Get some code from a GitHub repository
                                                }
                                            }
                                            stage('UAT') {
                                                steps {
                                                    git '' //Get some code from a GitHub repository
                                                }
                                            }
                                        }  
                                    }

              * Building a CI Pipeline 
                Example:
                          pipeline {
                              agent any
                              tools{
                                  go 'go-1.17'
                              }
                          
                              environment {
                                  GO111MODULE='on'
                              }
                              
                              stages {
                                  stage('Test') {
                                      steps{
                                          git '' // GitHub Repository URL
                                          sh 'go test ./...' //Shell command to run tests
                                      }
                                  }
                              }
                          }


              * Building a CD Pipeline 
                Example:
                        pipeline {
                            agent any
                            tools{
                                go 'go-1.17'
                            }
                        
                            environment {
                                GO111MODULE='on'
                            }
                            
                            stages {
                                stage('Development') {
                                    steps{
                                        git '' // GitHub Repository URL
                                        // sh 'go test ./...' //Shell command to run tests
                                    }
                                }
                                stage('Building our image') {
                                    steps {
                                        script {
                                            app = docker.build("go-cd-process")
                                        }
                                    }
                                }
                            }
                        }

              * Full Pipeline Deployment
                Example:
                        pipeline {
                            agent any
                            tools {
                                go 'go-1.17'
                            }
                        
                            environment {
                                GO111MODULE='on'
                            }
                            
                            stages {
                                stage('Test') {
                                    steps {
                                        git '' // GitHub Repository URL
                                        sh 'go test ./...' //Shell command to run tests
                                    }
                                }
                                stage('Build') {
                                    steps {
                                        git '' // GitHub Repository URL
                                        sh 'go build' //Shell command to build the application
                                    }
                                }
                                stage('Run') {
                                    steps {
                                        sh 'cd /path/to/the/file/pipeline_name && go-webapp-sample &' //By default the apps will be in /var/lib/jenkins/workspace/pipeline_name
                                    }
                                }
                        
                            }
                        }
              

  Section 14 - Docker Overview Introduction
                * Docker Overview
                    Why do we need Docker?
                    What can it do?
                    |  |-----> Containerize Applications
                    |--------> Run each service with its own dependencies in separate containers.

                    What are containers?
                    Docker is developed in the Go language and utilizes LXC, cgroups, and the Linux kernel itself. 
                    Since it's based on LXC, a Docker container does not include a separate operating system; instead it relies on the operating system's own functionality as provided by the underlying infrastructure.

                    Containers VS Virtual Machine
                    Container VS Image

                * Getting started with Docker | Setup and Install Docker //https://docs.docker.com/engine/install/ubuntu/

  Section 15 - Docker Commands

                * Basic Docker Commands
                    $ docker version                                // Checks docker Version
                    $ docker run <services>                         // Run -Start a container    
                    $ docker ps                                     // ps - list conatainer {CONATINER ID | IMAGE | COMMAND | CREATED | STATUS | PORTS | NAMES}
                    $ docker ps -a                                  // For all running containers
                    $ docker stop <CONATINER_ID>/<CONATINER_NAME>   // STOP- stop container
                    $ docker rm <CONATINER_ID>/<CONATINER_NAME>     // Rm - Remove a container permanently
                    $ docker images                                 // images - Lists images
                    $ docker rmi <CONTAINER_ID>/<CONATINER_NAME>    // rmi - Remove Images (Delete all dependent containers to remove image)
                    $ docker pull <CONTAINER_ID>/<CONATINER_NAME>   // pull - to download an image
                    $ docker exec <CONATINER_NAME> cat path/to/the/container // exec - execute a command on a running container
                    $ docker run kodekloud/simple-webapp            // run - attach & detach
                    $ docker run -d <images>                        // This command runs the mentioned <image> in the background
                    $ docker run -d <images> sleep <time_in_seconds> //runs the given image for the time mentioned after sleep


  Section 16 - Docker Run
                $ docker run image:version                         // Run -Start a container(image) with specified version after :
                $ docker run -i kodekloud/simple-webapp            // -i The command will run and take the input
                $ docker run -it kodekloud/simple-webapp           // -it The command will run and interact with the Terminal
                $ docker run -p port:port <container id>           // -p port 
                $ docker run -v path/of/the/folder <images>        // -v Volume mapping
                $ docker inspect <container id>                    // inspect - To inspect the container (in JSON format)
                $ docker logs <container id>                        // Gives container logs

              Advanced Docker Run Features

  Section 17 - Docker Images
               * Docker Images
                        How to create my own Image?
                        1. OS - Ubuntu
                        2. Update apt repo 
                        3. Install dependencies using apt
                        4. Install Python dependencies using pip
                        5. Copy source code to /apt folder
                        6. Run the web server using the "flask" command

                Layered Architecture
                        Dockerfile
                        FROM Ubuntu                                                        Layer 1. Base Ubuntu Layer
                        RUN apt-get update && apt-get -y install python                    Layer 2. Changes in apt packages 
                        RUN pip install flask flask-mysql                                  Layer 3. Change in pip packages
                        COPY . /opt/source-code                                            Layer 4. Source code
                        ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run             Layer 5. Update Entrypoint with "flask" command
                
                Docker build Output 
                Failure
                  |---- Layer 1. Base Ubuntu Layer
                  |---- Layer 2. Changes in apt packages 
                  |---- Layer 3. Change in pip packages
                  |---- Layer 4. Source code
                  |---- Layer 5. Update Entrypoint with "flask" command
    
                What can we containerize?
                We can containerize databases, development tools, operating  systems, etc. We can containerize web browsers, utility tools like curl//, applications like Spotify etc.

            * Creating a new Docker Image
            * Environment Variables
              $ docker inspect <CONTAINER ID> | grep -A 10 Env
              $ docker run -p 38282:8080 --name blue-app -e APP_COLOR=blue -d kodekloud/simple-webapp
              $ docker exec -it blue-app env
              $ docker run -e MYSQL_ROOT_PASSWORD=db_pass123 --name mysql-db MySQL                         // Used MYSQL_ROOT_PASSWORD (per Docker Hub) to secure it with db_pass123. Container’s live and locked!

            * Command vs Entrypoint
            
              $ cat Dockerfile-mysql | grep ENTRYPOINT  
              $ cat Dockerfile-wordpress | grep CMD 
              $ cat Dockerfile-wordpress | grep ENTRYPOINT
              $ cat Dockerfile-wordpress | grep ENTRYPOINT and $ cat Dockerfile-wordpress | grep CMD
              $ cat Dockerfile-ubuntu | grep CMD 


  Section 18 - Docker Engine_Storage and Networking
                * Docker Engine
                * Docker Storage
                * Docker Networking
                  $ docker network ls 
                  $ docker inspect alpine-1 
                  $ docker network inspect bridge 
                  $ docker run --name alpine-2 --network=none alpine 
                  $ docker network create --driver bridge --subnet 182.18.0.0/24 --gateway 182.18.0.1 wp-mysql-network 
                  $ docker network inspect wp-mysql-network 
                  $ docker run -d -e MYSQL_ROOT_PASSWORD=db_pass123 --name mysql-db --network wp-mysql-network mysql:5.6
                  $ docker run --network=wp-mysql-network -e DB_Host=mysql-db -e DB_Password=db_pass123 -p 38080:8080 --name webapp --link mysql-db:mysql-db -d kodekloud/simple-webapp-mysql  

 


  Section 19 - Docker Registry
              * Public Registry
                hub.docker.com
                docker.io
                gcr.io
              * Private Registry
              
              If we are running our application on-premises and don't have a private registry?
              How do we deploy our own private registry within our organization?
              $ docker run -d -p 5000:5000 --name retistry registry:2             // The Docker registry is itself another application, and of course it's available as a Docker image. The name of the image is registry and it exposes the API on port 5000.
              $ docker image tag my-image localhost:5000/my-image                 // Docker image tag command to tag the image with the private registry URL in it.
              $ docker push localhost:5000/my-image                               // I can then push my image to my local private registry using the command docker push and the new image
              $ docker pull localhost:5000/my-image                               // I can pull my image from anywhere within this network using either localhost if you're on the same host, or the IP or domain name of my docker host, if I'm accessing from another host in my environment.
              $ docker pull 192.168.56.100:5000/my-image       

   Section 20 - Kubernetes Overview
                * Introduction
                * Containers overview
                * Container Orchestration
                * Kubernetes Architecture

   Section 21 - Setup Kubernetes 
   Section 22 - Kubernetes Concepts






















